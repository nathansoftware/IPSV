(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.EventNode = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var nodes = {};

var Listener = function Listener(callback, context, cancel) {
  _classCallCheck(this, Listener);

  this.callback = callback;
  this.context = context;
  this.cancel = cancel;
};

var EventNode = function () {
  function EventNode() {
    _classCallCheck(this, EventNode);

    this._id = Math.random();
    this._listeners = {};
  }

  _createClass(EventNode, [{
    key: 'on',
    value: function on(name, callback, context) {
      var _this = this;

      nodes[this._id] = this;
      var id = Math.random();
      if (!this._listeners[name]) this._listeners[name] = {};
      this._listeners[name][id] = new Listener(callback, context, function () {
        return _this._cancelListener(name, id);
      });
      return this._listeners[name][id];
    }
  }, {
    key: 'trigger',
    value: function trigger() {
      var _this2 = this;

      var args = [].splice.call(arguments, 0);
      if (!this._listeners[args[0]]) return Promise.resolve([]);
      return Promise.all(Object.keys(this._listeners[args[0]]).map(function (id) {
        var payload = undefined;
        try {
          payload = JSON.parse(JSON.stringify(args.slice(1)));
        } catch (error) {
          payload = args.slice(1);
        }
        _this2._listeners[args[0]][id].callback.apply(null, payload);
      }));
    }
  }, {
    key: 'clear',
    value: function clear(context) {
      var _this3 = this;

      Object.keys(this._listeners).forEach(function (name) {
        return _this3._clearNamespace(name, context);
      });
      this._pruneNode();
    }
  }, {
    key: '_clearNamespace',
    value: function _clearNamespace(name, context) {
      var _this4 = this;

      Object.keys(this._listeners[name]).forEach(function (id) {
        return _this4._clearListener(name, id, context);
      });
      this._pruneNamespace(name);
    }
  }, {
    key: '_clearListener',
    value: function _clearListener(name, id, context) {
      if (context && this._listeners[name][id].context !== context) return;
      this._cleanListener(name, id);
    }
  }, {
    key: '_pruneNamespace',
    value: function _pruneNamespace(name) {
      if (Object.keys(this._listeners[name]).length === 0) delete this._listeners[name];
    }
  }, {
    key: '_pruneNode',
    value: function _pruneNode() {
      if (Object.keys(this._listeners).length === 0) delete nodes[this._id];
    }
  }, {
    key: '_cancelListener',
    value: function _cancelListener(name, id) {
      this._cleanListener(name, id);
      this._pruneNamespace(name);
      this._pruneNode();
    }
  }, {
    key: '_cleanListener',
    value: function _cleanListener(name, id) {
      delete this._listeners[name][id].callback;
      delete this._listeners[name][id].context;
      delete this._listeners[name][id].cancel;
      delete this._listeners[name][id];
    }
  }, {
    key: 'hasListeners',
    get: function get() {
      return Object.keys(this._listeners).length > 0;
    }
  }], [{
    key: 'clear',
    value: function clear(context) {
      Object.keys(nodes).forEach(function (id) {
        return nodes[id].clear(context);
      });
    }
  }]);

  return EventNode;
}();

module.exports = EventNode;

},{}]},{},[1])(1)
});