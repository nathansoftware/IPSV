'use strict';
/* jshint -W074 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var jsrsasign = require('jsrsasign');

var Authenticator = function () {
  function Authenticator(sdk) {
    _classCallCheck(this, Authenticator);

    this._sdk = sdk;
    this._auth = null;
    this._promise = null;
    this._resolve = null;
    this._reject = null;
    this._reset();
    this._lastAuth = null;
    this._id = Math.random();
  }

  _createClass(Authenticator, [{
    key: 'start',
    value: function start() {
      var _this = this;

      if (this._sdk.options.auth) {
        this._reset();
        setTimeout(function () {
          return _this._onSuccess(_this._sdk.options.auth);
        });
      } else this._login();
      return this._promise;
    }
  }, {
    key: 'stop',
    value: function stop() {
      this._auth = null;
      this._reset();
    }
  }, {
    key: 'getAuthSync',
    value: function getAuthSync() {
      return this._auth || this._lastAuth;
    }
  }, {
    key: 'getAuth',
    value: function getAuth() {
      return this._promise;
    }
  }, {
    key: 'on',
    value: function on(name, callback, context) {
      return this._sdk.events.on(name, callback, context);
    }
  }, {
    key: '_onSuccess',
    value: function _onSuccess(auth) {
      var _this2 = this;

      this._reset();
      this._timeout = setTimeout(function () {
        return _this2._refresh();
      }, (auth.expiration - Date.now()) / 2);
      this._auth = auth;
      this._lastAuth = auth;
      this._resolve(auth);
      this._sdk.events.trigger('update', auth);
    }
  }, {
    key: '_reset',
    value: function _reset() {
      var _this3 = this;

      clearTimeout(this._timeout);
      if (!this._auth && this._promise) return;
      this._lastAuth = this._auth;
      this._auth = null;
      this._promise = new Promise(function (resolve, reject) {
        _this3._resolve = resolve;_this3._reject = reject;
      });
    }
  }, {
    key: '_onError',
    value: function _onError(error) {
      this._reset();
      console.warn(error);
    }
  }, {
    key: '_onFatal',
    value: function _onFatal(error) {
      this._reset();
      this._reject(error);
      this._sdk.events.trigger('error', error);
    }
  }, {
    key: '_login',
    value: function _login() {
      var _this4 = this;

      this._reset();
      var options = this._sdk.options;
      var payload = {};
      if (options.type === 'user') {
        payload = { type: 'user', username: options.username, password: options.password, organization: options.organization };
      } else if (options.type === 'device') {
        payload = { token: this._sign({ type: 'device', uuid: options.uuid, allowPairing: options.allowPairing }, options.secret || '_') };
      } else if (options.type === 'consumerApp') {
        payload = { token: this._sign({ type: 'consumerApp', uuid: options.uuid }, options.apiKey) };
      } else if (options.type === 'direct') {
        return this._onFatal(new Error('Authentication payload is no longer valid and no credentials available to login again.'));
      }
      fetch(options.host + '/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      }).then(function (response) {
        if (response.status === 401) _this4._onFatal(new Error('Authentication failed. Please check your credentials.'));else if (!response.ok) throw new Error();else return response.json().then(function (auth) {
          return _this4._onSuccess(auth);
        });
      }).catch(function (error) {
        _this4._onError(error);
        _this4._timeout = setTimeout(function () {
          return _this4._login();
        }, 5000);
      });
    }
  }, {
    key: '_sign',
    value: function _sign(payload, secret) {
      var header = {};
      header.alg = 'HS256';
      header.typ = 'JWT';
      var body = {};
      Object.keys(payload).forEach(function (k) {
        return body[k] = payload[k];
      });
      body.iat = Math.round(Date.now() / 1000);
      body.exp = body.iat + 86400;
      var sheader = JSON.stringify(header);
      var sbody = JSON.stringify(body);
      return jsrsasign.jws.JWS.sign('HS256', sheader, sbody, { rstr: secret });
    }
  }, {
    key: '_refresh',
    value: function _refresh() {
      var _this5 = this;

      fetch(this._sdk.options.host + '/api/auth/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this._lastAuth.token
        }
      }).then(function (response) {
        if (response.status === 401) _this5._login();else if (!response.ok) throw new Error();else return response.json().then(function (auth) {
          return _this5._onSuccess(auth);
        });
      }).catch(function (error) {
        _this5._timeout = setTimeout(function () {
          return _this5._refresh();
        }, 60000);
      });
    }
  }]);

  return Authenticator;
}();

module.exports = Authenticator;