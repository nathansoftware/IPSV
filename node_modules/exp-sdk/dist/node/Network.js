'use strict';
/* jshint -W074 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var io = require('socket.io-client');

var EventNode = require('event-node');

var Subscription = function () {
  function Subscription() {
    var _this = this;

    _classCallCheck(this, Subscription);

    this._status = false;
    this._promise = new Promise(function (resolve) {
      return _this._resolve = resolve;
    });
    this.reset();
  }

  _createClass(Subscription, [{
    key: 'reset',
    value: function reset() {
      var _this2 = this;

      if (!this._status) return;
      this._status = false;
      this._promise = new Promise(function (resolve) {
        return _this2._resolve = resolve;
      });
    }
  }, {
    key: 'resolve',
    value: function resolve() {
      this._resolve();
      this._status = true;
    }
  }, {
    key: 'wait',
    value: function wait() {
      return this._promise;
    }
  }]);

  return Subscription;
}();

var Channel = function () {
  function Channel(id, network) {
    _classCallCheck(this, Channel);

    this._id = id;
    this._network = network;
    this._events = new EventNode();
  }

  _createClass(Channel, [{
    key: 'listen',
    value: function listen(name, callback, context) {
      var _this3 = this;

      return this._events.on(name, function (payload, message) {
        callback(payload, function (response) {
          return Promise.resolve().then(function () {
            return response;
          }).then(function (response) {
            return _this3._network.respond(message.id, message.channel, response);
          });
        }, message);
      }, context);
    }
  }, {
    key: 'receive',
    value: function receive(message) {
      this._events.trigger(message.name, message.payload, message);
      this._events.trigger('9fecccbc-78a9-4b58-9313-04e5edd923fe', message.payload, message);
    }
  }, {
    key: 'hasListeners',
    get: function get() {
      return this._events.hasListeners;
    }
  }]);

  return Channel;
}();

var ChannelDelegate = function () {
  function ChannelDelegate(name, options, sdk, context) {
    _classCallCheck(this, ChannelDelegate);

    this._name = name || 'default';
    this._options = options || {};
    this._sdk = sdk;
    this._context = context;
    this._id = null;
  }

  _createClass(ChannelDelegate, [{
    key: 'broadcast',
    value: function broadcast(name, payload, timeout) {
      var _this4 = this;

      return this._generateId().then(function (id) {
        return _this4._sdk.network.broadcast(name, id, payload, timeout);
      });
    }
  }, {
    key: 'listen',
    value: function listen(name, callback) {
      var _this5 = this;

      if (!callback) {
        callback = name;
        name = '9fecccbc-78a9-4b58-9313-04e5edd923fe';
      }
      return this._generateId().then(function (id) {
        return _this5._sdk.network.listen(name, id, callback, _this5._context);
      });
    }
  }, {
    key: 'fling',
    value: function fling(payload, timeout) {
      return this.broadcast('fling', payload, timeout);
    }
  }, {
    key: '_generateId',
    value: function _generateId() {
      var _this6 = this;

      if (this._id) return Promise.resolve(this._id);
      return this._sdk.authenticator.getAuth().then(function (auth) {
        var array = [auth.identity.organization, _this6._name, _this6._options.system ? 1 : 0, _this6._options.consumer ? 1 : 0];
        var string = JSON.stringify(array);
        if (typeof window === 'undefined') _this6._id = new Buffer(string).toString('base64');else _this6._id = btoa(string);
        return _this6._id;
      });
    }
  }]);

  return ChannelDelegate;
}();

var Network = function () {
  function Network(sdk) {
    _classCallCheck(this, Network);

    this._sdk = sdk;
    this._status = true;
    this._socket = null;
    this._channels = {};
    this._subscriptions = {};
    this._listener = null;
  }

  _createClass(Network, [{
    key: 'start',
    value: function start() {
      var _this7 = this;

      this._listener = this._sdk.authenticator.on('update', function (auth) {
        return _this7._connect(auth);
      });
    }
  }, {
    key: 'stop',
    value: function stop() {
      if (this._listener) this._listener.cancel();
      this._listener = null;
      this._disconnect();
    }
  }, {
    key: 'on',
    value: function on(name, callback, context) {
      return this._events.on(name, callback, context);
    }
  }, {
    key: 'getChannel',
    value: function getChannel(name, options, context) {
      return new ChannelDelegate(name, options, this._sdk, context);
    }
  }, {
    key: '_connect',
    value: function _connect(auth) {
      var _this8 = this;

      this._disconnect();
      if (!this._status) return;
      if (!this._sdk.options.enableNetwork) return;
      var socket = io(this._sdk.options.host, {
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionDelayMax: 20000,
        timeout: 20000,
        reconnectionAttempts: Infinity,
        query: 'token=' + auth.token
      });
      this._socket = socket;
      this._socket.on('broadcast', function (message) {
        if (socket === _this8._socket) _this8._onBroadcast(message);
      });
      this._socket.on('connect', function () {
        if (socket === _this8._socket) _this8._onOnline();
      });
      this._socket.on('subscribed', function (ids) {
        if (socket === _this8._socket) _this8._onSubscribed(ids);
      });
      this._socket.on('connect_error', function () {
        if (socket === _this8._socket) _this8._onOffline();
      });
    }
  }, {
    key: '_disconnect',
    value: function _disconnect() {
      if (!this._socket) return;
      this._socket.close();
      this._socket = null;
      this._sdk.events.trigger('offline');
    }
  }, {
    key: 'broadcast',
    value: function broadcast(name, channel, payload, timeout) {
      var message = { name: name, channel: channel, payload: payload };
      return this._sdk.api.post('/api/networks/current/broadcasts', message, { timeout: timeout });
    }
  }, {
    key: 'respond',
    value: function respond(id, channel, payload) {
      var message = { id: id, channel: channel, payload: payload };
      return this._sdk.api.post('/api/networks/current/responses', message);
    }
  }, {
    key: '_emit',
    value: function _emit(name, payload) {
      if (!this._socket || !this._socket.connected) return;
      this._socket.emit(name, payload);
    }
  }, {
    key: 'listen',
    value: function listen(name, channel, callback, context) {
      if (!this._channels[channel]) this._channels[channel] = new Channel(channel, this);
      var listener = this._channels[channel].listen(name, callback, context);
      if (!this._subscriptions[channel]) {
        this._subscriptions[channel] = new Subscription();
        this._emit('subscribe', [channel]);
      }
      return this._subscriptions[channel].wait().then(function () {
        return listener;
      });
    }
  }, {
    key: '_onSubscribed',
    value: function _onSubscribed(ids) {
      var _this9 = this;

      ids.forEach(function (id) {
        if (!_this9._subscriptions[id]) _this9._subscriptions[id] = new Subscription();
        _this9._subscriptions[id].resolve();
      });
    }
  }, {
    key: '_onBroadcast',
    value: function _onBroadcast(message) {
      if (!this._channels[message.channel]) return;
      this._channels[message.channel].receive(message);
    }
  }, {
    key: '_onOnline',
    value: function _onOnline() {
      var _this10 = this;

      Object.keys(this._subscriptions).forEach(function (id) {
        _this10._subscriptions[id].reset();
        if (!_this10._channels[id] || !_this10._channels[id].hasListeners) {
          delete _this10._subscriptions[id];
        }
      });
      this._emit('subscribe', Object.keys(this._subscriptions));
      this._sdk.events.trigger('online');
    }
  }, {
    key: '_onOffline',
    value: function _onOffline() {
      var _this11 = this;

      Object.keys(this._subscriptions).forEach(function (id) {
        return _this11._subscriptions[id].reset();
      });
      this._sdk.events.trigger('offline');
    }
  }, {
    key: 'isConnected',
    get: function get() {
      return this._socket ? this._socket.connected : false;
    }
  }]);

  return Network;
}();

module.exports = Network;