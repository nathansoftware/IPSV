'use strict';
/* jshint -W074 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('lodash');
var EventNode = require('event-node');

var Authenticator = require('./Authenticator');
var API = require('./API');
var Network = require('./Network');

var defaults = { enableNetwork: true };

var SDK = function () {
  function SDK(options) {
    _classCallCheck(this, SDK);

    this.options = options;
    this.events = new EventNode();
    this.authenticator = new Authenticator(this);
    this.api = new API(this);
    this.network = new Network(this);
  }

  _createClass(SDK, [{
    key: 'stop',
    value: function stop() {
      this.network.stop();
      this.authenticator.stop();
      this.constructor.instances.splice(this.constructor.instances.indexOf(this), 1);
    }
  }, {
    key: 'start',
    value: function start() {
      this.network.start();
      this.authenticator.start();
      this.constructor.instances.push(this);
    }
  }], [{
    key: 'stop',
    value: function stop() {
      this.instances.map(function (sdk) {
        return sdk;
      }).forEach(function (sdk) {
        return sdk.stop();
      });
    }
  }, {
    key: 'start',
    value: function start(options) {
      var sdk = new this(this.validate(options));
      sdk.start();
      return sdk;
    }
  }, {
    key: 'validate',
    value: function validate(options) {
      options = _.merge({}, defaults, options);
      if (options.type === 'user' || options.username || options.password || options.organization) {
        options.type = 'user';
        if (!options.username) throw new Error('Please specify the username.');
        if (!options.password) throw new Error('Please specify the password.');
        if (!options.organization) throw new Error('Please specify the organization.');
      } else if (options.type === 'device' || options.secret || options.allowPairing) {
        options.type = 'device';
        if (!options.uuid && !options.allowPairing) throw new Error('Please specify the uuid.');
        if (!options.secret && !options.allowPairing) throw new Error('Please specify the device secret.');
      } else if (options.type === 'consumerApp' || options.apiKey) {
        options.type = 'consumerApp';
        if (!options.uuid) throw new Error('Please specify the uuid.');
        if (!options.apiKey) throw new Error('Please specify the apiKey');
      } else if (options.type === 'direct' || options.auth) {
        options.type = 'direct';
        if (!options.auth) throw new Error('Please specifiy an auth response payload.');
      } else {
        throw new Error('Please specify authentication type.');
      }
      if (!options.host) throw new Error('Please specify a host.');
      return options;
    }
  }]);

  return SDK;
}();

SDK.instances = [];

var EXP = function () {
  function EXP(sdk, context) {
    _classCallCheck(this, EXP);

    this.__sdk = sdk;
    this._context = context || Math.random().toString();
    this.EventNode = EventNode;
  }

  _createClass(EXP, [{
    key: 'stop',


    /* Runtime */
    value: function stop() {
      this._sdk.stop();delete this.__sdk;
    }
  }, {
    key: 'getAuth',
    value: function getAuth() {
      return this._sdk.authenticator.getAuth();
    }
  }, {
    key: 'on',
    value: function on(name, callback) {
      return this._sdk.events.on(name, callback, this._context);
    }
  }, {
    key: 'clone',


    /* Undocumented Memory Management */
    value: function clone(context) {
      return new this.constructor(this._sdk, context);
    }
  }, {
    key: 'clear',
    value: function clear() {
      return EventNode.clear(this._context);
    }

    /* Network */

  }, {
    key: 'getChannel',
    value: function getChannel(name, options) {
      return this._sdk.network.getChannel(name, options, this._context);
    }
  }, {
    key: 'get',


    /* Naked API */
    value: function get(path, params) {
      return this._sdk.api.get(path, params);
    }
  }, {
    key: 'post',
    value: function post(path, body, params) {
      return this._sdk.api.post(path, body, params);
    }
  }, {
    key: 'patch',
    value: function patch(path, body, params) {
      return this._sdk.api.patch(path, body, params);
    }
  }, {
    key: 'put',
    value: function put(path, body, params) {
      return this._sdk.api.put(path, body, params);
    }
  }, {
    key: 'delete',
    value: function _delete(path, params) {
      return this._sdk.api.delete(path, params);
    }

    /* Devices */

  }, {
    key: 'getDevice',
    value: function getDevice(uuid) {
      return this._sdk.api.Device.get(uuid, this._sdk, this._context);
    }
  }, {
    key: 'findDevices',
    value: function findDevices(params) {
      return this._sdk.api.Device.find(params, this._sdk, this._context);
    }
  }, {
    key: 'createDevice',
    value: function createDevice(document) {
      return this._sdk.api.Device.create(document, this._sdk, this._context);
    }
  }, {
    key: 'getCurrentDevice',
    value: function getCurrentDevice() {
      return this._sdk.api.Device.getCurrent(this._sdk, this._context);
    }
  }, {
    key: 'deleteDevice',
    value: function deleteDevice(uuid) {
      return this._sdk.api.Device.delete(uuid, this._sdk);
    }

    /* Things */

  }, {
    key: 'getThing',
    value: function getThing(uuid) {
      return this._sdk.api.Thing.get(uuid, this._sdk, this._context);
    }
  }, {
    key: 'findThings',
    value: function findThings(params) {
      return this._sdk.api.Thing.find(params, this._sdk, this._context);
    }
  }, {
    key: 'createThing',
    value: function createThing(document) {
      return this._sdk.api.Thing.create(document, this._sdk, this._context);
    }
  }, {
    key: 'deleteThing',
    value: function deleteThing(uuid) {
      return this._sdk.api.Thing.delete(uuid, this._sdk);
    }

    /* Experiences */

  }, {
    key: 'getExperience',
    value: function getExperience(uuid) {
      return this._sdk.api.Experience.get(uuid, this._sdk, this._context);
    }
  }, {
    key: 'findExperiences',
    value: function findExperiences(params) {
      return this._sdk.api.Experience.find(params, this._sdk, this._context);
    }
  }, {
    key: 'createExperience',
    value: function createExperience(document) {
      return this._sdk.api.Experience.create(document, this._sdk, this._context);
    }
  }, {
    key: 'getCurrentExperience',
    value: function getCurrentExperience() {
      return this._sdk.api.Experience.getCurrent(this._sdk, this._context);
    }
  }, {
    key: 'deleteExperience',
    value: function deleteExperience(uuid) {
      return this._sdk.api.Experience.delete(uuid, this._sdk);
    }

    /* Locations */

  }, {
    key: 'getLocation',
    value: function getLocation(uuid) {
      return this._sdk.api.Location.get(uuid, this._sdk, this._context);
    }
  }, {
    key: 'findLocations',
    value: function findLocations(params) {
      return this._sdk.api.Location.find(params, this._sdk, this._context);
    }
  }, {
    key: 'createLocation',
    value: function createLocation(document) {
      return this._sdk.api.Location.create(document, this._sdk, this._context);
    }
  }, {
    key: 'getCurrentLocation',
    value: function getCurrentLocation() {
      return this._sdk.api.Location.getCurrent(this._sdk, this._context);
    }
  }, {
    key: 'deleteLocation',
    value: function deleteLocation(uuid) {
      return this._sdk.api.Location.delete(uuid, this._sdk);
    }

    /* Zones */

  }, {
    key: 'getCurrentZones',
    value: function getCurrentZones() {
      return this._sdk.api.Zone.getCurrent(this._sdk, this._context);
    }

    /* Feeds */

  }, {
    key: 'getFeed',
    value: function getFeed(uuid) {
      return this._sdk.api.Feed.get(uuid, this._sdk, this._context);
    }
  }, {
    key: 'findFeeds',
    value: function findFeeds(params) {
      return this._sdk.api.Feed.find(params, this._sdk, this._context);
    }
  }, {
    key: 'createFeed',
    value: function createFeed(document) {
      return this._sdk.api.Feed.create(document, this._sdk, this._context);
    }
  }, {
    key: 'deleteFeed',
    value: function deleteFeed(uuid) {
      return this._sdk.api.Feed.delete(uuid, this._sdk);
    }

    /* Content */

  }, {
    key: 'getContent',
    value: function getContent(uuid) {
      return this._sdk.api.Content.get(uuid, this._sdk, this._context);
    }
  }, {
    key: 'findContent',
    value: function findContent(params) {
      return this._sdk.api.Content.find(params, this._sdk, this._context);
    }

    /* Data */

  }, {
    key: 'getData',
    value: function getData(group, key) {
      return this._sdk.api.Data.get(group, key, this._sdk, this._context);
    }
  }, {
    key: 'findData',
    value: function findData(params) {
      return this._sdk.api.Data.find(params, this._sdk, this._context);
    }
  }, {
    key: 'createData',
    value: function createData(group, key, value) {
      return this._sdk.api.Data.create(group, key, value, this._sdk, this._context);
    }
  }, {
    key: 'deleteData',
    value: function deleteData(group, key) {
      return this._sdk.api.Data.delete(group, key, this._sdk);
    }
  }, {
    key: '_sdk',
    get: function get() {
      if (!this.__sdk) throw new Error('SDK was stopped.');return this.__sdk;
    }
  }, {
    key: 'auth',
    get: function get() {
      return this._sdk.authenticator.getAuthSync();
    }
  }, {
    key: 'isConnected',
    get: function get() {
      return this._sdk.network.isConnected;
    }
  }], [{
    key: 'start',
    value: function start(options) {
      var sdk = SDK.start(options);return new this(sdk);
    }
  }, {
    key: 'stop',
    value: function stop() {
      return SDK.stop();
    }
  }, {
    key: 'clear',
    value: function clear(context) {
      return this.EventNode.clear(context);
    }
  }, {
    key: 'EventNode',
    get: function get() {
      return EventNode;
    }
  }]);

  return EXP;
}();

module.exports = EXP;