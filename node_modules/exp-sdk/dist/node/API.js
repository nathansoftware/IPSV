'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _fetch = require('isomorphic-fetch');
var _ = require('lodash');

var Resource = function () {
  function Resource(document, sdk, context) {
    _classCallCheck(this, Resource);

    this._document = document;
    this._sdk = sdk;
    this._context = context;
  }

  _createClass(Resource, [{
    key: '_getChannelName',
    value: function _getChannelName() {
      throw new Error('Not implemented.');
    }
  }, {
    key: '_getResourcePath',
    value: function _getResourcePath() {
      throw new Error('Not implemented.');
    }
  }, {
    key: 'save',
    value: function save() {
      var _this = this;

      return this._sdk.api.patch(this._getResourcePath(), this.document).then(function (document) {
        return _this._document = document;
      });
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      var _this2 = this;

      return this._sdk.api.get(this._getResourcePath()).then(function (document) {
        return _this2._document = document;
      });
    }
  }, {
    key: 'getChannel',
    value: function getChannel(options) {
      return this._sdk.network.getChannel(this._getChannelName(), options, this._context);
    }
  }, {
    key: 'clone',
    value: function clone(context) {
      return new this.constructor(this.document, this._sdk, context || this._context);
    }
  }, {
    key: 'document',
    get: function get() {
      return this._document || {};
    }
  }], [{
    key: '_getCollectionPath',
    value: function _getCollectionPath() {
      throw new Error('Not implemented.');
    }
  }, {
    key: 'create',
    value: function create(document, sdk, context) {
      var _this3 = this;

      return sdk.api.post(this._getCollectionPath(), document).then(function (document) {
        return new _this3(document, sdk, context);
      });
    }
  }, {
    key: 'find',
    value: function find(params, sdk, context) {
      var _this4 = this;

      return sdk.api.get(this._getCollectionPath(), params).then(function (query) {
        var results = query.results.map(function (document) {
          return new _this4(document, sdk, context);
        });
        Object.keys(query).forEach(function (key) {
          return results[key] = query[key];
        });
        return results;
      });
    }
  }]);

  return Resource;
}();

var CommonResource = function (_Resource) {
  _inherits(CommonResource, _Resource);

  function CommonResource() {
    _classCallCheck(this, CommonResource);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(CommonResource).apply(this, arguments));
  }

  _createClass(CommonResource, [{
    key: '_getChannelName',
    value: function _getChannelName() {
      return this.uuid;
    }
  }, {
    key: '_getResourcePath',
    value: function _getResourcePath() {
      return this.constructor._getCollectionPath() + '/' + this.uuid;
    }
  }, {
    key: 'delete',
    value: function _delete() {
      return this._sdk.api.delete(this._getResourcePath());
    }
  }, {
    key: 'uuid',
    get: function get() {
      return this.document.uuid;
    }
  }, {
    key: 'name',
    get: function get() {
      return this.document.name;
    },
    set: function set(value) {
      this.document.name = value;
    }
  }], [{
    key: 'get',
    value: function get(uuid, sdk, context) {
      var _this6 = this;

      if (!uuid) return sdk.authenticator.getAuth().then(function () {
        return null;
      });
      var path = this._getCollectionPath() + '/' + uuid;
      return sdk.api.get(path).then(function (document) {
        return new _this6(document, sdk, context);
      }).catch(function (error) {
        if (error && error.status === 404) return null;
        throw error;
      });
    }
  }, {
    key: 'delete',
    value: function _delete(uuid, sdk) {
      if (!uuid) return sdk.authenticator.getAuth().then(function () {
        return null;
      });
      var path = this._getCollectionPath() + '/' + uuid;
      return sdk.api.delete(path);
    }
  }]);

  return CommonResource;
}(Resource);

/* Devices */

var Device = function (_CommonResource) {
  _inherits(Device, _CommonResource);

  function Device() {
    _classCallCheck(this, Device);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Device).apply(this, arguments));
  }

  _createClass(Device, [{
    key: 'getExperience',
    value: function getExperience() {
      return this._sdk.api.Experience.get(_.get(this.document, 'experience.uuid'), this._sdk, this.context);
    }
  }, {
    key: 'getLocation',
    value: function getLocation() {
      return this._sdk.api.Location.get(_.get(this.document, 'location.uuid'), this._sdk, this.context);
    }
  }, {
    key: 'getZones',
    value: function getZones() {
      var _this8 = this;

      return this.getLocation().then(function (location) {
        if (!location) {
          var empty = [];
          empty.total = 0;
          return empty;
        }
        var zones = location.document.zones.filter(function (locationZoneDocument) {
          return _this8.document.location.zones.find(function (deviceZoneDocument) {
            return deviceZoneDocument.key === locationZoneDocument.key;
          });
        }).map(function (document) {
          return new _this8._sdk.api.Zone(document, location, _this8._sdk, _this8._context);
        });
        zones.total = zones.length;
        return zones;
      });
    }
  }], [{
    key: '_getCollectionPath',
    value: function _getCollectionPath() {
      return '/api/devices';
    }
  }, {
    key: 'getCurrent',
    value: function getCurrent(sdk, context) {
      var _this9 = this;

      return sdk.authenticator.getAuth().then(function (auth) {
        return _this9.get(auth.identity.uuid, sdk, context);
      });
    }
  }]);

  return Device;
}(CommonResource);

/* Things */

var Thing = function (_CommonResource2) {
  _inherits(Thing, _CommonResource2);

  function Thing() {
    _classCallCheck(this, Thing);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Thing).apply(this, arguments));
  }

  _createClass(Thing, [{
    key: 'getLocation',
    value: function getLocation() {
      return this._sdk.api.Location.get(_.get(this.document, 'location.uuid'), this._sdk, this.context);
    }
  }, {
    key: 'getZones',
    value: function getZones() {
      var _this11 = this;

      return this.getLocation().then(function (location) {
        if (!location) {
          var empty = [];
          empty.total = 0;
          return empty;
        }

        var zones = location.document.zones.filter(function (locationZoneDocument) {
          return _this11.document.location.zones.find(function (deviceZoneDocument) {
            return deviceZoneDocument.key === locationZoneDocument.key;
          });
        }).map(function (document) {
          return new _this11._sdk.api.Zone(document, location, _this11._sdk, _this11._context);
        });
        zones.total = zones.length;
        return zones;
      });
    }
  }], [{
    key: '_getCollectionPath',
    value: function _getCollectionPath() {
      return '/api/things';
    }
  }]);

  return Thing;
}(CommonResource);

/* Experiences */

var Experience = function (_CommonResource3) {
  _inherits(Experience, _CommonResource3);

  function Experience() {
    _classCallCheck(this, Experience);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Experience).apply(this, arguments));
  }

  _createClass(Experience, [{
    key: 'getDevices',
    value: function getDevices(params) {
      params = params || {};
      params['experience.uuid'] = this.uuid;
      return this._sdk.api.Device.find(params, this._sdk, this._context);
    }
  }], [{
    key: '_getCollectionPath',
    value: function _getCollectionPath() {
      return '/api/experiences';
    }
  }, {
    key: 'getCurrent',
    value: function getCurrent(sdk, context) {
      var _this13 = this;

      return Device.getCurrent(sdk, context).then(function (device) {
        if (!device || !device.document.experience || !device.document.experience.uuid) return null;
        return _this13.get(device.document.experience.uuid, sdk, context);
      });
    }
  }]);

  return Experience;
}(CommonResource);

/* Locations */

var Location = function (_CommonResource4) {
  _inherits(Location, _CommonResource4);

  function Location() {
    _classCallCheck(this, Location);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Location).apply(this, arguments));
  }

  _createClass(Location, [{
    key: 'getDevices',
    value: function getDevices(params) {
      params = params || {};
      params['location.uuid'] = this.uuid;
      return this._sdk.api.Device.find(params, this._sdk, this._context);
    }
  }, {
    key: 'getThings',
    value: function getThings(params) {
      params = params || {};
      params['location.uuid'] = this.uuid;
      return this._sdk.api.Thing.find(params, this._sdk, this._context);
    }
  }, {
    key: 'getZones',
    value: function getZones() {
      var _this15 = this;

      if (!this.document.zones) return Promise.resolve().then(function () {
        var empty = [];
        empty.length = 0;
        return empty;
      });
      return Promise.resolve().then(function () {
        var zones = _this15.document.zones.map(function (document) {
          return new _this15._sdk.api.Zone(document, _this15, _this15._sdk, _this15._context);
        });
        zones.total = zones.length;
        return zones;
      });
    }
  }, {
    key: 'getLayoutUrl',
    value: function getLayoutUrl() {
      return this._getResourcePath() + '/layout';
    }
  }], [{
    key: '_getCollectionPath',
    value: function _getCollectionPath() {
      return '/api/locations';
    }
  }, {
    key: 'getCurrent',
    value: function getCurrent(sdk, context) {
      var _this16 = this;

      return Device.getCurrent(sdk, context).then(function (device) {
        if (!device || !device.document.location || !device.document.location.uuid) return null;
        return _this16.get(device.document.location.uuid, sdk, context);
      });
    }
  }]);

  return Location;
}(CommonResource);

var Zone = function (_Resource2) {
  _inherits(Zone, _Resource2);

  function Zone(document, location, sdk, context) {
    _classCallCheck(this, Zone);

    var _this17 = _possibleConstructorReturn(this, Object.getPrototypeOf(Zone).call(this, document, sdk, context));

    _this17._location = location;
    return _this17;
  }

  _createClass(Zone, [{
    key: 'save',
    value: function save() {
      return this._location.save();
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      var _this18 = this;

      return this._location.refresh().then(function () {
        _this18._document = (_this18._location.document.zones || []).find(function (document) {
          return document.key === _this18.key;
        });
      });
    }
  }, {
    key: 'getLocation',
    value: function getLocation() {
      return Promise.resolve(this._location);
    }
  }, {
    key: 'getDevices',
    value: function getDevices(params) {
      params = params || {};
      params['location.uuid'] = this._location.uuid;
      params['location.zones.key'] = this.key;
      return this._sdk.api.Device.find(params, this._sdk, this._context);
    }
  }, {
    key: 'getThings',
    value: function getThings(params) {
      params = params || {};
      params['location.uuid'] = this._location.uuid;
      params['location.zones.key'] = this.key;
      return this._sdk.api.Thing.find(params, this._sdk, this._context);
    }
  }, {
    key: '_getChannelName',
    value: function _getChannelName() {
      return this._location.uuid + ':zone:' + this.key;
    }
  }, {
    key: 'clone',
    value: function clone(context) {
      return new this.constructor(this.document, this._location, this._sdk, context);
    }
  }, {
    key: 'key',
    get: function get() {
      return this.document.key;
    }
  }, {
    key: 'name',
    get: function get() {
      return this.document.name;
    },
    set: function set(value) {
      this.document.name = value;
    }
  }], [{
    key: 'getCurrent',
    value: function getCurrent(sdk, context) {
      return Device.getCurrent(sdk, context).then(function (device) {
        if (!device) return [];
        return device.getZones();
      });
    }
  }]);

  return Zone;
}(Resource);

var Feed = function (_CommonResource5) {
  _inherits(Feed, _CommonResource5);

  function Feed() {
    _classCallCheck(this, Feed);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Feed).apply(this, arguments));
  }

  _createClass(Feed, [{
    key: 'getData',
    value: function getData(params) {
      return this._sdk.api.get(this._getResourcePath() + '/data', params);
    }
  }], [{
    key: '_getCollectionPath',
    value: function _getCollectionPath() {
      return '/api/connectors/feeds';
    }
  }]);

  return Feed;
}(CommonResource);

var Data = function (_Resource3) {
  _inherits(Data, _Resource3);

  function Data() {
    _classCallCheck(this, Data);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Data).apply(this, arguments));
  }

  _createClass(Data, [{
    key: '_getResourcePath',
    value: function _getResourcePath() {
      return this.constructor._getCollectionPath() + '/' + encodeURIComponent(this.group) + '/' + encodeURIComponent(this.key);
    }
  }, {
    key: 'save',
    value: function save() {
      return this._sdk.api.put(this._getResourcePath(), this.value);
    }
  }, {
    key: '_getChannelName',
    value: function _getChannelName() {
      return 'data' + ':' + this.key + ':' + this.group;
    }
  }, {
    key: 'delete',
    value: function _delete() {
      return this._sdk.api.delete(this._getResourcePath());
    }
  }, {
    key: 'group',
    get: function get() {
      return this.document.group;
    },
    set: function set(value) {
      this.document.group = value;
    }
  }, {
    key: 'key',
    get: function get() {
      return this.document.key;
    },
    set: function set(value) {
      this.document.key = value;
    }
  }, {
    key: 'value',
    get: function get() {
      return this.document.value;
    },
    set: function set(value) {
      this.document.value = value;
    }
  }], [{
    key: '_getCollectionPath',
    value: function _getCollectionPath() {
      return '/api/data';
    }
  }, {
    key: 'get',
    value: function get(group, key, sdk, context) {
      var _this21 = this;

      if (!group || !key) return Promise.resolve(null);
      var path = this._getCollectionPath() + '/' + encodeURIComponent(group) + '/' + encodeURIComponent(key);
      return sdk.api.get(path).then(function (document) {
        return new _this21(document, sdk, context);
      }).catch(function (error) {
        if (error && error.status === 404) return null;
        throw error;
      });
    }
  }, {
    key: 'create',
    value: function create(group, key, value, sdk, context) {
      var _this22 = this;

      if (!key) throw new Error('Please specify a key.');
      if (!group) throw new Error('Please specify a group');
      var path = this._getCollectionPath() + '/' + encodeURIComponent(group) + '/' + encodeURIComponent(key);
      return sdk.api.put(path, value).then(function (document) {
        return new _this22(document, sdk, context);
      });
    }
  }, {
    key: 'delete',
    value: function _delete(group, key, sdk) {
      if (!key) throw new Error('Please specify a key.');
      if (!group) throw new Error('Please specify a group');
      var path = this._getCollectionPath() + '/' + encodeURIComponent(group) + '/' + encodeURIComponent(key);
      return sdk.api.delete(path);
    }
  }]);

  return Data;
}(Resource);

var Content = function (_CommonResource6) {
  _inherits(Content, _CommonResource6);

  function Content() {
    _classCallCheck(this, Content);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Content).apply(this, arguments));
  }

  _createClass(Content, [{
    key: 'getChildren',
    value: function getChildren(params) {
      params = params || {};
      params['parent'] = this.uuid;
      return this._sdk.api.Content.find(params, this._sdk, this._context);
    }
  }, {
    key: 'getUrl',
    value: function getUrl() {
      var auth = this._sdk.authenticator.getAuthSync();
      if (this.subtype === 'scala:content:file') {
        return this._sdk.options.host + '/api/delivery' + Content._encodePath(this.document.path);
      } else if (this.subtype === 'scala:content:app') {
        return this._sdk.options.host + '/api/delivery' + Content._encodePath(this.document.path) + '/index.html';
      } else if (this.subtype === 'scala:content:url') {
        return this.document.url;
      }
    }
  }, {
    key: 'getVariantUrl',
    value: function getVariantUrl(name) {
      return this.getUrl() + '?variant=' + name;
    }
  }, {
    key: 'hasVariant',
    value: function hasVariant(name) {
      return this.document.variants && this.document.variants.some(function (element) {
        return element.name === name;
      });
    }
  }, {
    key: 'delete',
    value: function _delete() {
      throw new Error('delete() is not supported');
    }
  }, {
    key: 'subtype',
    get: function get() {
      return this.document.subtype;
    }
  }], [{
    key: '_getCollectionPath',
    value: function _getCollectionPath() {
      return '/api/content';
    }
  }, {
    key: '_encodePath',
    value: function _encodePath(value) {
      return encodeURI(value).replace('!', '%21').replace('#', '%23').replace('$', '%24').replace('&', '%26').replace('\'', '%27').replace('(', '%28').replace(')', '%29').replace(',', '%2C').replace(':', '%3A').replace(';', '%3B').replace('=', '%3D').replace('?', '%3F').replace('~', '%7E');
    }
  }, {
    key: 'delete',
    value: function _delete() {
      throw new Error('delete() is not supported');
    }
  }]);

  return Content;
}(CommonResource);

var ApiError = function (_Error) {
  _inherits(ApiError, _Error);

  function ApiError(message, code, status) {
    _classCallCheck(this, ApiError);

    var _this24 = _possibleConstructorReturn(this, Object.getPrototypeOf(ApiError).call(this, message));

    _this24.message = message;
    _this24.code = code || null;
    _this24.status = status || null;
    return _this24;
  }

  return ApiError;
}(Error);

var Api = function () {
  function Api(sdk) {
    _classCallCheck(this, Api);

    this._sdk = sdk;
    this.Device = Device;
    this.Experience = Experience;
    this.Thing = Thing;
    this.Zone = Zone;
    this.Location = Location;
    this.Feed = Feed;
    this.Data = Data;
    this.Content = Content;
  }

  _createClass(Api, [{
    key: 'fetch',
    value: function fetch(path, params, options) {
      var _this25 = this;

      // Wait for auth.
      // On 401, notify Auth and try again.

      options = options || {};
      var fullPath = path;
      if (params) fullPath += this.encodeQueryString(params);
      if (_typeof(options.body) === 'object' && options.headers && options.headers['Content-Type'] === 'application/json') options.body = JSON.stringify(options.body);
      return this._sdk.authenticator.getAuth().then(function (auth) {
        if (auth.identity.isPairing) throw new Error('Cannot send request when in pairing mode.');
        options.cors = true;
        options.credentials = 'include';
        options.headers = options.headers || {};
        options.headers.Authorization = 'Bearer ' + auth.token;
        options.headers.Accept = 'application/json';
        return _fetch(_this25._sdk.options.host + fullPath, options).then(function (response) {
          if (response && !response.ok && response.status === 401) {
            _this25._sdk.authenticator._refresh(); // TODO: Make this method public? Should authenticator handle all requests?
            return _this25.fetch(path, params, options);
          }
          if (options.method === 'DELETE') return Promise.resolve();
          return response.json().catch(function () {
            return null;
          }).then(function (body) {
            if (!response.ok) {
              if (body) {
                throw new ApiError(body.message, body.code, response.status);
              } else {
                throw new ApiError('An unknown error has occured.');
              }
            }
            return body;
          });
        });
      });
    }
  }, {
    key: 'get',
    value: function get(path, params) {
      return this.fetch(path, params, { method: 'GET' });
    }
  }, {
    key: 'post',
    value: function post(path, body, params) {
      var options = { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: body };
      return this.fetch(path, params, options);
    }
  }, {
    key: 'put',
    value: function put(path, body, params) {
      var options = { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: body };
      return this.fetch(path, params, options);
    }
  }, {
    key: 'patch',
    value: function patch(path, body, params) {
      var options = { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: body };
      return this.fetch(path, params, options);
    }
  }, {
    key: 'delete',
    value: function _delete(path, params) {
      if (params) path += this.encodeQueryString(params);
      return this.fetch(path, null, { method: 'DELETE' });
    }
  }, {
    key: 'encodeQueryString',
    value: function encodeQueryString(params) {
      var parts = [];
      Object.keys(params).forEach(function (name) {
        parts.push(encodeURIComponent(name) + '=' + encodeURIComponent(params[name]));
      });
      return '?' + parts.join('&');
    }
  }]);

  return Api;
}();

module.exports = Api;